// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VEHICLE_INFO.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VehicleControl_Viewer.Protots {

  /// <summary>Holder for reflection information generated from VEHICLE_INFO.proto</summary>
  public static partial class VEHICLEINFOReflection {

    #region Descriptor
    /// <summary>File descriptor for VEHICLE_INFO.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VEHICLEINFOReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJWRUhJQ0xFX0lORk8ucHJvdG8SCHR1dG9yaWFsIisKCVRpbWVzdGFtcBIP",
            "CgdzZWNvbmRzGAEgASgDEg0KBW5hbm9zGAIgASgFIswMCgxWRUhJQ0xFX0lO",
            "Rk8SFgoOaXNUY3BJcENvbm5lY3QYASABKAgSEgoKVkVISUNMRV9JRBgCIAEo",
            "CRIrCgxWRUhJQ0xFX1RZUEUYAyABKA4yFS50dXRvcmlhbC5WZWhpY2xlVHlw",
            "ZRISCgpDVVJfQURSX0lEGAQgASgJEhIKCkNVUl9TRUNfSUQYBSABKAkSFAoM",
            "QUNDX1NFQ19ESVNUGAYgASgBEisKC01PREVfU1RBVFVTGAcgASgOMhYudHV0",
            "b3JpYWwuVkhNb2RlU3RhdHVzEiwKCkFDVF9TVEFUVVMYCCABKA4yGC50dXRv",
            "cmlhbC5WSEFjdGlvblN0YXR1cxIPCgdNQ1NfQ01EGAkgASgJEhAKCE9IVENf",
            "Q01EGAogASgJEisKC0JMT0NLX1BBVVNFGAsgASgOMhYudHV0b3JpYWwuVmhT",
            "dG9wU2luZ2xlEikKCUNNRF9QQVVTRRgMIAEoDjIWLnR1dG9yaWFsLlZoU3Rv",
            "cFNpbmdsZRIpCglPQlNfUEFVU0UYDSABKA4yFi50dXRvcmlhbC5WaFN0b3BT",
            "aW5nbGUSKQoJSElEX1BBVVNFGA4gASgOMhYudHV0b3JpYWwuVmhTdG9wU2lu",
            "Z2xlEiUKBUVSUk9SGA8gASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEhAK",
            "CE9CU19ESVNUGBAgASgFEg8KB0hBU19DU1QYESABKAUSDgoGQ1NUX0lEGBIg",
            "ASgJEiUKCFVQRF9USU1FGBMgASgLMhMudHV0b3JpYWwuVGltZXN0YW1wEhgK",
            "EFZFSElDTEVfQUNDX0RJU1QYFCABKAUSFQoNTUFOVF9BQ0NfRElTVBgVIAEo",
            "BRImCglNQU5UX0RBVEUYFiABKAsyEy50dXRvcmlhbC5UaW1lc3RhbXASEgoK",
            "R1JJUF9DT1VOVBgXIAEoBRIXCg9HUklQX01BTlRfQ09VTlQYGCABKAUSKwoO",
            "R1JJUF9NQU5UX0RBVEUYGSABKAsyEy50dXRvcmlhbC5UaW1lc3RhbXASEgoK",
            "SVNfUEFSS0lORxgaIAEoCBImCglQQVJLX1RJTUUYGyABKAsyEy50dXRvcmlh",
            "bC5UaW1lc3RhbXASEwoLUEFSS19BRFJfSUQYHCABKAkSEgoKSVNfQ1lDTElO",
            "RxgdIAEoCBIqCg1DWUNMRVJVTl9USU1FGB4gASgLMhMudHV0b3JpYWwuVGlt",
            "ZXN0YW1wEhMKC0NZQ0xFUlVOX0lEGB8gASgJEhMKC1ByZWRpY3RQYXRoGCAg",
            "AygJEhMKC0N5Y2xpbmdQYXRoGCEgAygJEhAKCHN0YXJ0QWRyGCIgASgJEg8K",
            "B0Zyb21BZHIYIyABKAkSDQoFVG9BZHIYJCABKAkSDQoFU3BlZWQYJSABKAES",
            "FAoMT2JzVmVoaWNsZUlEGCYgASgJEg4KBkFsYXJtcxgnIAMoCRImCgdDbWRU",
            "eXBlGCggASgOMhUudHV0b3JpYWwuQ29tbWFuZFR5cGUSLgoNdmhfQ01EX1N0",
            "YXR1cxgpIAEoDjIXLnR1dG9yaWFsLkNvbW1hbmRTdGF0dXMSLgoRVmhSZWNl",
            "bnRUcmFuRXZlbnQYKiABKA4yEy50dXRvcmlhbC5FdmVudFR5cGUSGQoRV2ls",
            "bFBhc3NTZWN0aW9uSUQYKyADKAkSGwoTcHJvY1Byb2dyZXNzX1BlcmNlbhgs",
            "IAEoBRI1ChRDdXJyZW50RHJpdmVEaXJjdGlvbhgtIAEoDjIXLnR1dG9yaWFs",
            "LkRyaXZlRGlyY3Rpb24SFAoMQ01EX1BSSU9USVRZGC4gASgFEhIKCkNNRF9D",
            "U1RfSUQYLyABKAkSJQoFU3RhdGUYMCABKA4yFi50dXRvcmlhbC5WZWhpY2xl",
            "U3RhdGUSKwoLUGF1c2VTdGF0dXMYMSABKA4yFi50dXRvcmlhbC5WaFN0b3BT",
            "aW5nbGUSMQoRU0FGRVRZX0RPT1JfUEFVU0UYMiABKA4yFi50dXRvcmlhbC5W",
            "aFN0b3BTaW5nbGUSMAoQRUFSVEhRVUFLRV9QQVVTRRgzIAEoDjIWLnR1dG9y",
            "aWFsLlZoU3RvcFNpbmdsZRIUCgxJU19JTlNUQUxMRUQYNCABKAgSDgoGWF9B",
            "eGlzGDUgASgBEg4KBllfQXhpcxg2IAEoASo1CgxWaFN0b3BTaW5nbGUSEgoO",
            "U3RvcFNpbmdsZV9PZmYQABIRCg1TdG9wU2luZ2xlX09uEAEqQgoLVmVoaWNs",
            "ZVR5cGUSDwoLVmhUeXBlX05vbmUQABIQCgxWaFR5cGVfQ2xlYW4QARIQCgxW",
            "aFR5cGVfRGlydHkQAirIAQoLQ29tbWFuZFR5cGUSDAoIQ01EX01vdmUQABIR",
            "Cg1DTURfTW92ZV9QYXJrEAESEwoPQ01EX01vdmVfTVRQb3J0EAISDAoIQ01E",
            "X0xvYWQQAxIOCgpDTURfVW5sb2FkEAQSEgoOQ01EX0xvYWRVbmxvYWQQBRIQ",
            "CgxDTURfVGVhY2hpbmcQBhIQCgxDTURfQ29udGludWUQBxINCglDTURfUm91",
            "bmQQCBIMCghDTURfSG9tZRAJEhAKDENNRF9PdmVycmlkZRAKKvYBCg1Db21t",
            "YW5kU3RhdHVzEg8KC0NNRFN0X1F1ZXVlEAASEQoNQ01EU3RfU2VuZGluZxAB",
            "EhMKD0NNRFN0X0V4ZWN1dGlvbhACEhIKDkNNRFN0X0Fib3J0aW5nEAMSEwoP",
            "Q01EU3RfQ2FuY2VsaW5nEAQSEwoPQ01EU3RfTm9ybWFsRW5kEAUSGgoWQ01E",
            "U3RfQWJub3JtYWxFbmRCeU9IVBAGEhoKFkNNRFN0X0Fibm9ybWFsRW5kQnlN",
            "Q1MQBxIbChdDTURTdF9BYm5vcm1hbEVuZEJ5T0hUQxAIEhkKFUNNRFN0X0Nh",
            "bmNlbEVuZEJ5T0hUQxAJKiIKC1NlY3Rpb25UeXBlEgoKBk5vcm1hbBAAEgcK",
            "A01UTBABKkYKCFRTQ1N0YXRlEgsKB1RTQ05PTkUQABIKCgZUU0NJTlQQARIK",
            "CgZQQVVTRUQQAhIICgRBVVRPEAMSCwoHUEFVU0lORxAEKncKCFRTQ0V2ZW50",
            "Eg4KClRTQ0luaXRpYWwQABIfChtTeXN0ZW1TdGFydGVkVXBTdWNjZXNzZnVs",
            "bHkQARIOCgpUU0NSZXN1bWVkEAISFwoTVENTUmVxdWVzdGVkVG9QYXVzZRAD",
            "EhEKDVBhdXNlQ29tcGxldGUQBCpOCg1Ecml2ZURpcmN0aW9uEhEKDURyaXZl",
            "RGlyX05vbmUQABIUChBEcml2ZURpcl9Gb3J3YXJkEAESFAoQRHJpdmVEaXJf",
            "UmV2ZXJzZRACKuMBCgxWZWhpY2xlU3RhdGUSFQoRVmVoaWNsZVN0YXRlX05v",
            "bmUQABIXChNWZWhpY2xlU3RhdGVfUmVtb3ZlEAESHAoYVmVoaWNsZVN0YXRl",
            "X05vdEFzc2lnbmVkEAISGAoUVmVoaWNsZVN0YXRlX0Vucm91dGUQAxIXChNW",
            "ZWhpY2xlU3RhdGVfUGFya2VkEAQSGgoWVmVoaWNsZVN0YXRlX0FjcXVpcmlu",
            "ZxAFEhsKF1ZlaGljbGVTdGF0ZV9EZXBvc2l0aW5nEAYSGQoVVmVoaWNsZVN0",
            "YXRlX0Fzc2lnbmVkEAcqjgEKDFZITW9kZVN0YXR1cxIICgROb25lEAASFQoR",
            "SW5pdGlhbF9Qb3dlcl9PRkYQARIUChBJbml0aWFsX1Bvd2VyX09OEAISCgoG",
            "TWFudWFsEAMSDwoLQXV0b19SZW1vdGUQBBIOCgpBdXRvX0xvY2FsEAUSDAoI",
            "QXV0b19NVFMQBhIMCghBdXRvX01UTBAHKmAKDlZIQWN0aW9uU3RhdHVzEg0K",
            "CU5vQ29tbWFuZBAAEg4KCkNvbW1hbmRpbmcQARIMCghUZWFjaGluZxAFEhMK",
            "D0dyaXBwZXJUZWFjaGluZxAGEgwKCEN5Y2xlUnVuEAcqqgIKCUV2ZW50VHlw",
            "ZRIQCgxMb2FkQXJyaXZhbHMQABIQCgxMb2FkQ29tcGxldGUQARISCg5Vbmxv",
            "YWRBcnJpdmFscxACEhIKDlVubG9hZENvbXBsZXRlEAMSFQoRQWRyT3JNb3Zl",
            "QXJyaXZhbHMQBBILCgdBZHJQYXNzEAUSDQoJTW92ZVBhdXNlEAYSDwoLTW92",
            "ZVJlc3RhcnQQBxIMCghCbG9ja1JlcRAIEgoKBkhJRFJlcRAJEg8KC0Jsb2Nr",
            "SElEUmVxEAoSDQoJVkhMb2FkaW5nEAsSDwoLVkhVbmxvYWRpbmcQDBILCgdC",
            "Q1JSZWFkEA0SEAoMQmxvY2tSZWxlYXNlEBUSDgoKSElEUmVsZWFzZRAWEhMK",
            "D0Jsb2NrSElEUmVsZWFzZRAXQlhQAVorZ2l0aHViLmNvbS9nb2xhbmcvcHJv",
            "dG9idWYvcHR5cGVzL3RpbWVzdGFtcPgBAaICA0dQQqoCHVZlaGljbGVDb250",
            "cm9sX1ZpZXdlci5Qcm90b3RzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::VehicleControl_Viewer.Protots.VhStopSingle), typeof(global::VehicleControl_Viewer.Protots.VehicleType), typeof(global::VehicleControl_Viewer.Protots.CommandType), typeof(global::VehicleControl_Viewer.Protots.CommandStatus), typeof(global::VehicleControl_Viewer.Protots.SectionType), typeof(global::VehicleControl_Viewer.Protots.TSCState), typeof(global::VehicleControl_Viewer.Protots.TSCEvent), typeof(global::VehicleControl_Viewer.Protots.DriveDirction), typeof(global::VehicleControl_Viewer.Protots.VehicleState), typeof(global::VehicleControl_Viewer.Protots.VHModeStatus), typeof(global::VehicleControl_Viewer.Protots.VHActionStatus), typeof(global::VehicleControl_Viewer.Protots.EventType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleControl_Viewer.Protots.Timestamp), global::VehicleControl_Viewer.Protots.Timestamp.Parser, new[]{ "Seconds", "Nanos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleControl_Viewer.Protots.VEHICLE_INFO), global::VehicleControl_Viewer.Protots.VEHICLE_INFO.Parser, new[]{ "IsTcpIpConnect", "VEHICLEID", "VEHICLETYPE", "CURADRID", "CURSECID", "ACCSECDIST", "MODESTATUS", "ACTSTATUS", "MCSCMD", "OHTCCMD", "BLOCKPAUSE", "CMDPAUSE", "OBSPAUSE", "HIDPAUSE", "ERROR", "OBSDIST", "HASCST", "CSTID", "UPDTIME", "VEHICLEACCDIST", "MANTACCDIST", "MANTDATE", "GRIPCOUNT", "GRIPMANTCOUNT", "GRIPMANTDATE", "ISPARKING", "PARKTIME", "PARKADRID", "ISCYCLING", "CYCLERUNTIME", "CYCLERUNID", "PredictPath", "CyclingPath", "StartAdr", "FromAdr", "ToAdr", "Speed", "ObsVehicleID", "Alarms", "CmdType", "VhCMDStatus", "VhRecentTranEvent", "WillPassSectionID", "ProcProgressPercen", "CurrentDriveDirction", "CMDPRIOTITY", "CMDCSTID", "State", "PauseStatus", "SAFETYDOORPAUSE", "EARTHQUAKEPAUSE", "ISINSTALLED", "XAxis", "YAxis" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum VhStopSingle {
    [pbr::OriginalName("StopSingle_Off")] StopSingleOff = 0,
    [pbr::OriginalName("StopSingle_On")] StopSingleOn = 1,
  }

  public enum VehicleType {
    [pbr::OriginalName("VhType_None")] VhTypeNone = 0,
    [pbr::OriginalName("VhType_Clean")] VhTypeClean = 1,
    [pbr::OriginalName("VhType_Dirty")] VhTypeDirty = 2,
  }

  public enum CommandType {
    [pbr::OriginalName("CMD_Move")] CmdMove = 0,
    [pbr::OriginalName("CMD_Move_Park")] CmdMovePark = 1,
    [pbr::OriginalName("CMD_Move_MTPort")] CmdMoveMtport = 2,
    [pbr::OriginalName("CMD_Load")] CmdLoad = 3,
    [pbr::OriginalName("CMD_Unload")] CmdUnload = 4,
    [pbr::OriginalName("CMD_LoadUnload")] CmdLoadUnload = 5,
    [pbr::OriginalName("CMD_Teaching")] CmdTeaching = 6,
    [pbr::OriginalName("CMD_Continue")] CmdContinue = 7,
    [pbr::OriginalName("CMD_Round")] CmdRound = 8,
    [pbr::OriginalName("CMD_Home")] CmdHome = 9,
    [pbr::OriginalName("CMD_Override")] CmdOverride = 10,
  }

  public enum CommandStatus {
    [pbr::OriginalName("CMDSt_Queue")] CmdstQueue = 0,
    [pbr::OriginalName("CMDSt_Sending")] CmdstSending = 1,
    [pbr::OriginalName("CMDSt_Execution")] CmdstExecution = 2,
    [pbr::OriginalName("CMDSt_Aborting")] CmdstAborting = 3,
    [pbr::OriginalName("CMDSt_Canceling")] CmdstCanceling = 4,
    [pbr::OriginalName("CMDSt_NormalEnd")] CmdstNormalEnd = 5,
    [pbr::OriginalName("CMDSt_AbnormalEndByOHT")] CmdstAbnormalEndByOht = 6,
    [pbr::OriginalName("CMDSt_AbnormalEndByMCS")] CmdstAbnormalEndByMcs = 7,
    [pbr::OriginalName("CMDSt_AbnormalEndByOHTC")] CmdstAbnormalEndByOhtc = 8,
    [pbr::OriginalName("CMDSt_CancelEndByOHTC")] CmdstCancelEndByOhtc = 9,
  }

  public enum SectionType {
    [pbr::OriginalName("Normal")] Normal = 0,
    [pbr::OriginalName("MTL")] Mtl = 1,
  }

  public enum TSCState {
    [pbr::OriginalName("TSCNONE")] Tscnone = 0,
    [pbr::OriginalName("TSCINT")] Tscint = 1,
    [pbr::OriginalName("PAUSED")] Paused = 2,
    [pbr::OriginalName("AUTO")] Auto = 3,
    [pbr::OriginalName("PAUSING")] Pausing = 4,
  }

  public enum TSCEvent {
    [pbr::OriginalName("TSCInitial")] Tscinitial = 0,
    [pbr::OriginalName("SystemStartedUpSuccessfully")] SystemStartedUpSuccessfully = 1,
    [pbr::OriginalName("TSCResumed")] Tscresumed = 2,
    [pbr::OriginalName("TCSRequestedToPause")] TcsrequestedToPause = 3,
    [pbr::OriginalName("PauseComplete")] PauseComplete = 4,
  }

  public enum DriveDirction {
    [pbr::OriginalName("DriveDir_None")] DriveDirNone = 0,
    [pbr::OriginalName("DriveDir_Forward")] DriveDirForward = 1,
    [pbr::OriginalName("DriveDir_Reverse")] DriveDirReverse = 2,
  }

  public enum VehicleState {
    [pbr::OriginalName("VehicleState_None")] None = 0,
    [pbr::OriginalName("VehicleState_Remove")] Remove = 1,
    [pbr::OriginalName("VehicleState_NotAssigned")] NotAssigned = 2,
    [pbr::OriginalName("VehicleState_Enroute")] Enroute = 3,
    [pbr::OriginalName("VehicleState_Parked")] Parked = 4,
    [pbr::OriginalName("VehicleState_Acquiring")] Acquiring = 5,
    [pbr::OriginalName("VehicleState_Depositing")] Depositing = 6,
    [pbr::OriginalName("VehicleState_Assigned")] Assigned = 7,
  }

  public enum VHModeStatus {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Initial_Power_OFF")] InitialPowerOff = 1,
    [pbr::OriginalName("Initial_Power_ON")] InitialPowerOn = 2,
    [pbr::OriginalName("Manual")] Manual = 3,
    [pbr::OriginalName("Auto_Remote")] AutoRemote = 4,
    [pbr::OriginalName("Auto_Local")] AutoLocal = 5,
    [pbr::OriginalName("Auto_MTS")] AutoMts = 6,
    [pbr::OriginalName("Auto_MTL")] AutoMtl = 7,
  }

  public enum VHActionStatus {
    [pbr::OriginalName("NoCommand")] NoCommand = 0,
    [pbr::OriginalName("Commanding")] Commanding = 1,
    [pbr::OriginalName("Teaching")] Teaching = 5,
    [pbr::OriginalName("GripperTeaching")] GripperTeaching = 6,
    [pbr::OriginalName("CycleRun")] CycleRun = 7,
  }

  public enum EventType {
    [pbr::OriginalName("LoadArrivals")] LoadArrivals = 0,
    [pbr::OriginalName("LoadComplete")] LoadComplete = 1,
    [pbr::OriginalName("UnloadArrivals")] UnloadArrivals = 2,
    [pbr::OriginalName("UnloadComplete")] UnloadComplete = 3,
    [pbr::OriginalName("AdrOrMoveArrivals")] AdrOrMoveArrivals = 4,
    [pbr::OriginalName("AdrPass")] AdrPass = 5,
    [pbr::OriginalName("MovePause")] MovePause = 6,
    [pbr::OriginalName("MoveRestart")] MoveRestart = 7,
    [pbr::OriginalName("BlockReq")] BlockReq = 8,
    [pbr::OriginalName("HIDReq")] Hidreq = 9,
    [pbr::OriginalName("BlockHIDReq")] BlockHidreq = 10,
    [pbr::OriginalName("VHLoading")] Vhloading = 11,
    [pbr::OriginalName("VHUnloading")] Vhunloading = 12,
    [pbr::OriginalName("BCRRead")] Bcrread = 13,
    [pbr::OriginalName("BlockRelease")] BlockRelease = 21,
    [pbr::OriginalName("HIDRelease")] Hidrelease = 22,
    [pbr::OriginalName("BlockHIDRelease")] BlockHidrelease = 23,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  [END csharp_declaration]
  /// </summary>
  public sealed partial class Timestamp : pb::IMessage<Timestamp> {
    private static readonly pb::MessageParser<Timestamp> _parser = new pb::MessageParser<Timestamp>(() => new Timestamp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timestamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleControl_Viewer.Protots.VEHICLEINFOReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp(Timestamp other) : this() {
      seconds_ = other.seconds_;
      nanos_ = other.nanos_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp Clone() {
      return new Timestamp(this);
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 1;
    private long seconds_;
    /// <summary>
    ///  Represents seconds of UTC time since Unix epoch
    ///  1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
    ///  9999-12-31T23:59:59Z inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "nanos" field.</summary>
    public const int NanosFieldNumber = 2;
    private int nanos_;
    /// <summary>
    ///  Non-negative fractions of a second at nanosecond resolution. Negative
    ///  second values with fractions must still have non-negative nanos values
    ///  that count forward in time. Must be from 0 to 999,999,999
    ///  inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nanos {
      get { return nanos_; }
      set {
        nanos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timestamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timestamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seconds != other.Seconds) return false;
      if (Nanos != other.Nanos) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seconds != 0L) hash ^= Seconds.GetHashCode();
      if (Nanos != 0) hash ^= Nanos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seconds != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Seconds);
      }
      if (Nanos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Nanos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seconds);
      }
      if (Nanos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nanos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timestamp other) {
      if (other == null) {
        return;
      }
      if (other.Seconds != 0L) {
        Seconds = other.Seconds;
      }
      if (other.Nanos != 0) {
        Nanos = other.Nanos;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Seconds = input.ReadInt64();
            break;
          }
          case 16: {
            Nanos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VEHICLE_INFO : pb::IMessage<VEHICLE_INFO> {
    private static readonly pb::MessageParser<VEHICLE_INFO> _parser = new pb::MessageParser<VEHICLE_INFO>(() => new VEHICLE_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VEHICLE_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleControl_Viewer.Protots.VEHICLEINFOReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VEHICLE_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VEHICLE_INFO(VEHICLE_INFO other) : this() {
      isTcpIpConnect_ = other.isTcpIpConnect_;
      vEHICLEID_ = other.vEHICLEID_;
      vEHICLETYPE_ = other.vEHICLETYPE_;
      cURADRID_ = other.cURADRID_;
      cURSECID_ = other.cURSECID_;
      aCCSECDIST_ = other.aCCSECDIST_;
      mODESTATUS_ = other.mODESTATUS_;
      aCTSTATUS_ = other.aCTSTATUS_;
      mCSCMD_ = other.mCSCMD_;
      oHTCCMD_ = other.oHTCCMD_;
      bLOCKPAUSE_ = other.bLOCKPAUSE_;
      cMDPAUSE_ = other.cMDPAUSE_;
      oBSPAUSE_ = other.oBSPAUSE_;
      hIDPAUSE_ = other.hIDPAUSE_;
      eRROR_ = other.eRROR_;
      oBSDIST_ = other.oBSDIST_;
      hASCST_ = other.hASCST_;
      cSTID_ = other.cSTID_;
      UPDTIME = other.uPDTIME_ != null ? other.UPDTIME.Clone() : null;
      vEHICLEACCDIST_ = other.vEHICLEACCDIST_;
      mANTACCDIST_ = other.mANTACCDIST_;
      MANTDATE = other.mANTDATE_ != null ? other.MANTDATE.Clone() : null;
      gRIPCOUNT_ = other.gRIPCOUNT_;
      gRIPMANTCOUNT_ = other.gRIPMANTCOUNT_;
      GRIPMANTDATE = other.gRIPMANTDATE_ != null ? other.GRIPMANTDATE.Clone() : null;
      iSPARKING_ = other.iSPARKING_;
      PARKTIME = other.pARKTIME_ != null ? other.PARKTIME.Clone() : null;
      pARKADRID_ = other.pARKADRID_;
      iSCYCLING_ = other.iSCYCLING_;
      CYCLERUNTIME = other.cYCLERUNTIME_ != null ? other.CYCLERUNTIME.Clone() : null;
      cYCLERUNID_ = other.cYCLERUNID_;
      predictPath_ = other.predictPath_.Clone();
      cyclingPath_ = other.cyclingPath_.Clone();
      startAdr_ = other.startAdr_;
      fromAdr_ = other.fromAdr_;
      toAdr_ = other.toAdr_;
      speed_ = other.speed_;
      obsVehicleID_ = other.obsVehicleID_;
      alarms_ = other.alarms_.Clone();
      cmdType_ = other.cmdType_;
      vhCMDStatus_ = other.vhCMDStatus_;
      vhRecentTranEvent_ = other.vhRecentTranEvent_;
      willPassSectionID_ = other.willPassSectionID_.Clone();
      procProgressPercen_ = other.procProgressPercen_;
      currentDriveDirction_ = other.currentDriveDirction_;
      cMDPRIOTITY_ = other.cMDPRIOTITY_;
      cMDCSTID_ = other.cMDCSTID_;
      state_ = other.state_;
      pauseStatus_ = other.pauseStatus_;
      sAFETYDOORPAUSE_ = other.sAFETYDOORPAUSE_;
      eARTHQUAKEPAUSE_ = other.eARTHQUAKEPAUSE_;
      iSINSTALLED_ = other.iSINSTALLED_;
      xAxis_ = other.xAxis_;
      yAxis_ = other.yAxis_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VEHICLE_INFO Clone() {
      return new VEHICLE_INFO(this);
    }

    /// <summary>Field number for the "isTcpIpConnect" field.</summary>
    public const int IsTcpIpConnectFieldNumber = 1;
    private bool isTcpIpConnect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTcpIpConnect {
      get { return isTcpIpConnect_; }
      set {
        isTcpIpConnect_ = value;
      }
    }

    /// <summary>Field number for the "VEHICLE_ID" field.</summary>
    public const int VEHICLEIDFieldNumber = 2;
    private string vEHICLEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VEHICLEID {
      get { return vEHICLEID_; }
      set {
        vEHICLEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VEHICLE_TYPE" field.</summary>
    public const int VEHICLETYPEFieldNumber = 3;
    private global::VehicleControl_Viewer.Protots.VehicleType vEHICLETYPE_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.VehicleType VEHICLETYPE {
      get { return vEHICLETYPE_; }
      set {
        vEHICLETYPE_ = value;
      }
    }

    /// <summary>Field number for the "CUR_ADR_ID" field.</summary>
    public const int CURADRIDFieldNumber = 4;
    private string cURADRID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CURADRID {
      get { return cURADRID_; }
      set {
        cURADRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CUR_SEC_ID" field.</summary>
    public const int CURSECIDFieldNumber = 5;
    private string cURSECID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CURSECID {
      get { return cURSECID_; }
      set {
        cURSECID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ACC_SEC_DIST" field.</summary>
    public const int ACCSECDISTFieldNumber = 6;
    private double aCCSECDIST_;
    /// <summary>
    ///  google.protobuf.Timestamp SEC_ENTRY_TIME = 5;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ACCSECDIST {
      get { return aCCSECDIST_; }
      set {
        aCCSECDIST_ = value;
      }
    }

    /// <summary>Field number for the "MODE_STATUS" field.</summary>
    public const int MODESTATUSFieldNumber = 7;
    private global::VehicleControl_Viewer.Protots.VHModeStatus mODESTATUS_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.VHModeStatus MODESTATUS {
      get { return mODESTATUS_; }
      set {
        mODESTATUS_ = value;
      }
    }

    /// <summary>Field number for the "ACT_STATUS" field.</summary>
    public const int ACTSTATUSFieldNumber = 8;
    private global::VehicleControl_Viewer.Protots.VHActionStatus aCTSTATUS_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.VHActionStatus ACTSTATUS {
      get { return aCTSTATUS_; }
      set {
        aCTSTATUS_ = value;
      }
    }

    /// <summary>Field number for the "MCS_CMD" field.</summary>
    public const int MCSCMDFieldNumber = 9;
    private string mCSCMD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MCSCMD {
      get { return mCSCMD_; }
      set {
        mCSCMD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OHTC_CMD" field.</summary>
    public const int OHTCCMDFieldNumber = 10;
    private string oHTCCMD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OHTCCMD {
      get { return oHTCCMD_; }
      set {
        oHTCCMD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BLOCK_PAUSE" field.</summary>
    public const int BLOCKPAUSEFieldNumber = 11;
    private global::VehicleControl_Viewer.Protots.VhStopSingle bLOCKPAUSE_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.VhStopSingle BLOCKPAUSE {
      get { return bLOCKPAUSE_; }
      set {
        bLOCKPAUSE_ = value;
      }
    }

    /// <summary>Field number for the "CMD_PAUSE" field.</summary>
    public const int CMDPAUSEFieldNumber = 12;
    private global::VehicleControl_Viewer.Protots.VhStopSingle cMDPAUSE_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.VhStopSingle CMDPAUSE {
      get { return cMDPAUSE_; }
      set {
        cMDPAUSE_ = value;
      }
    }

    /// <summary>Field number for the "OBS_PAUSE" field.</summary>
    public const int OBSPAUSEFieldNumber = 13;
    private global::VehicleControl_Viewer.Protots.VhStopSingle oBSPAUSE_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.VhStopSingle OBSPAUSE {
      get { return oBSPAUSE_; }
      set {
        oBSPAUSE_ = value;
      }
    }

    /// <summary>Field number for the "HID_PAUSE" field.</summary>
    public const int HIDPAUSEFieldNumber = 14;
    private global::VehicleControl_Viewer.Protots.VhStopSingle hIDPAUSE_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.VhStopSingle HIDPAUSE {
      get { return hIDPAUSE_; }
      set {
        hIDPAUSE_ = value;
      }
    }

    /// <summary>Field number for the "ERROR" field.</summary>
    public const int ERRORFieldNumber = 15;
    private global::VehicleControl_Viewer.Protots.VhStopSingle eRROR_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.VhStopSingle ERROR {
      get { return eRROR_; }
      set {
        eRROR_ = value;
      }
    }

    /// <summary>Field number for the "OBS_DIST" field.</summary>
    public const int OBSDISTFieldNumber = 16;
    private int oBSDIST_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OBSDIST {
      get { return oBSDIST_; }
      set {
        oBSDIST_ = value;
      }
    }

    /// <summary>Field number for the "HAS_CST" field.</summary>
    public const int HASCSTFieldNumber = 17;
    private int hASCST_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HASCST {
      get { return hASCST_; }
      set {
        hASCST_ = value;
      }
    }

    /// <summary>Field number for the "CST_ID" field.</summary>
    public const int CSTIDFieldNumber = 18;
    private string cSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CSTID {
      get { return cSTID_; }
      set {
        cSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UPD_TIME" field.</summary>
    public const int UPDTIMEFieldNumber = 19;
    private global::VehicleControl_Viewer.Protots.Timestamp uPDTIME_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.Timestamp UPDTIME {
      get { return uPDTIME_; }
      set {
        uPDTIME_ = value;
      }
    }

    /// <summary>Field number for the "VEHICLE_ACC_DIST" field.</summary>
    public const int VEHICLEACCDISTFieldNumber = 20;
    private int vEHICLEACCDIST_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VEHICLEACCDIST {
      get { return vEHICLEACCDIST_; }
      set {
        vEHICLEACCDIST_ = value;
      }
    }

    /// <summary>Field number for the "MANT_ACC_DIST" field.</summary>
    public const int MANTACCDISTFieldNumber = 21;
    private int mANTACCDIST_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MANTACCDIST {
      get { return mANTACCDIST_; }
      set {
        mANTACCDIST_ = value;
      }
    }

    /// <summary>Field number for the "MANT_DATE" field.</summary>
    public const int MANTDATEFieldNumber = 22;
    private global::VehicleControl_Viewer.Protots.Timestamp mANTDATE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.Timestamp MANTDATE {
      get { return mANTDATE_; }
      set {
        mANTDATE_ = value;
      }
    }

    /// <summary>Field number for the "GRIP_COUNT" field.</summary>
    public const int GRIPCOUNTFieldNumber = 23;
    private int gRIPCOUNT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GRIPCOUNT {
      get { return gRIPCOUNT_; }
      set {
        gRIPCOUNT_ = value;
      }
    }

    /// <summary>Field number for the "GRIP_MANT_COUNT" field.</summary>
    public const int GRIPMANTCOUNTFieldNumber = 24;
    private int gRIPMANTCOUNT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GRIPMANTCOUNT {
      get { return gRIPMANTCOUNT_; }
      set {
        gRIPMANTCOUNT_ = value;
      }
    }

    /// <summary>Field number for the "GRIP_MANT_DATE" field.</summary>
    public const int GRIPMANTDATEFieldNumber = 25;
    private global::VehicleControl_Viewer.Protots.Timestamp gRIPMANTDATE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.Timestamp GRIPMANTDATE {
      get { return gRIPMANTDATE_; }
      set {
        gRIPMANTDATE_ = value;
      }
    }

    /// <summary>Field number for the "IS_PARKING" field.</summary>
    public const int ISPARKINGFieldNumber = 26;
    private bool iSPARKING_;
    /// <summary>
    ///  string NODE_ADR = 25;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ISPARKING {
      get { return iSPARKING_; }
      set {
        iSPARKING_ = value;
      }
    }

    /// <summary>Field number for the "PARK_TIME" field.</summary>
    public const int PARKTIMEFieldNumber = 27;
    private global::VehicleControl_Viewer.Protots.Timestamp pARKTIME_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.Timestamp PARKTIME {
      get { return pARKTIME_; }
      set {
        pARKTIME_ = value;
      }
    }

    /// <summary>Field number for the "PARK_ADR_ID" field.</summary>
    public const int PARKADRIDFieldNumber = 28;
    private string pARKADRID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PARKADRID {
      get { return pARKADRID_; }
      set {
        pARKADRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IS_CYCLING" field.</summary>
    public const int ISCYCLINGFieldNumber = 29;
    private bool iSCYCLING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ISCYCLING {
      get { return iSCYCLING_; }
      set {
        iSCYCLING_ = value;
      }
    }

    /// <summary>Field number for the "CYCLERUN_TIME" field.</summary>
    public const int CYCLERUNTIMEFieldNumber = 30;
    private global::VehicleControl_Viewer.Protots.Timestamp cYCLERUNTIME_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.Timestamp CYCLERUNTIME {
      get { return cYCLERUNTIME_; }
      set {
        cYCLERUNTIME_ = value;
      }
    }

    /// <summary>Field number for the "CYCLERUN_ID" field.</summary>
    public const int CYCLERUNIDFieldNumber = 31;
    private string cYCLERUNID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CYCLERUNID {
      get { return cYCLERUNID_; }
      set {
        cYCLERUNID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PredictPath" field.</summary>
    public const int PredictPathFieldNumber = 32;
    private static readonly pb::FieldCodec<string> _repeated_predictPath_codec
        = pb::FieldCodec.ForString(258);
    private readonly pbc::RepeatedField<string> predictPath_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PredictPath {
      get { return predictPath_; }
    }

    /// <summary>Field number for the "CyclingPath" field.</summary>
    public const int CyclingPathFieldNumber = 33;
    private static readonly pb::FieldCodec<string> _repeated_cyclingPath_codec
        = pb::FieldCodec.ForString(266);
    private readonly pbc::RepeatedField<string> cyclingPath_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CyclingPath {
      get { return cyclingPath_; }
    }

    /// <summary>Field number for the "startAdr" field.</summary>
    public const int StartAdrFieldNumber = 34;
    private string startAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartAdr {
      get { return startAdr_; }
      set {
        startAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FromAdr" field.</summary>
    public const int FromAdrFieldNumber = 35;
    private string fromAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromAdr {
      get { return fromAdr_; }
      set {
        fromAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToAdr" field.</summary>
    public const int ToAdrFieldNumber = 36;
    private string toAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToAdr {
      get { return toAdr_; }
      set {
        toAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 37;
    private double speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "ObsVehicleID" field.</summary>
    public const int ObsVehicleIDFieldNumber = 38;
    private string obsVehicleID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObsVehicleID {
      get { return obsVehicleID_; }
      set {
        obsVehicleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Alarms" field.</summary>
    public const int AlarmsFieldNumber = 39;
    private static readonly pb::FieldCodec<string> _repeated_alarms_codec
        = pb::FieldCodec.ForString(314);
    private readonly pbc::RepeatedField<string> alarms_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Alarms {
      get { return alarms_; }
    }

    /// <summary>Field number for the "CmdType" field.</summary>
    public const int CmdTypeFieldNumber = 40;
    private global::VehicleControl_Viewer.Protots.CommandType cmdType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.CommandType CmdType {
      get { return cmdType_; }
      set {
        cmdType_ = value;
      }
    }

    /// <summary>Field number for the "vh_CMD_Status" field.</summary>
    public const int VhCMDStatusFieldNumber = 41;
    private global::VehicleControl_Viewer.Protots.CommandStatus vhCMDStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.CommandStatus VhCMDStatus {
      get { return vhCMDStatus_; }
      set {
        vhCMDStatus_ = value;
      }
    }

    /// <summary>Field number for the "VhRecentTranEvent" field.</summary>
    public const int VhRecentTranEventFieldNumber = 42;
    private global::VehicleControl_Viewer.Protots.EventType vhRecentTranEvent_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.EventType VhRecentTranEvent {
      get { return vhRecentTranEvent_; }
      set {
        vhRecentTranEvent_ = value;
      }
    }

    /// <summary>Field number for the "WillPassSectionID" field.</summary>
    public const int WillPassSectionIDFieldNumber = 43;
    private static readonly pb::FieldCodec<string> _repeated_willPassSectionID_codec
        = pb::FieldCodec.ForString(346);
    private readonly pbc::RepeatedField<string> willPassSectionID_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WillPassSectionID {
      get { return willPassSectionID_; }
    }

    /// <summary>Field number for the "procProgress_Percen" field.</summary>
    public const int ProcProgressPercenFieldNumber = 44;
    private int procProgressPercen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProcProgressPercen {
      get { return procProgressPercen_; }
      set {
        procProgressPercen_ = value;
      }
    }

    /// <summary>Field number for the "CurrentDriveDirction" field.</summary>
    public const int CurrentDriveDirctionFieldNumber = 45;
    private global::VehicleControl_Viewer.Protots.DriveDirction currentDriveDirction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.DriveDirction CurrentDriveDirction {
      get { return currentDriveDirction_; }
      set {
        currentDriveDirction_ = value;
      }
    }

    /// <summary>Field number for the "CMD_PRIOTITY" field.</summary>
    public const int CMDPRIOTITYFieldNumber = 46;
    private int cMDPRIOTITY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CMDPRIOTITY {
      get { return cMDPRIOTITY_; }
      set {
        cMDPRIOTITY_ = value;
      }
    }

    /// <summary>Field number for the "CMD_CST_ID" field.</summary>
    public const int CMDCSTIDFieldNumber = 47;
    private string cMDCSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CMDCSTID {
      get { return cMDCSTID_; }
      set {
        cMDCSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 48;
    private global::VehicleControl_Viewer.Protots.VehicleState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.VehicleState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "PauseStatus" field.</summary>
    public const int PauseStatusFieldNumber = 49;
    private global::VehicleControl_Viewer.Protots.VhStopSingle pauseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.VhStopSingle PauseStatus {
      get { return pauseStatus_; }
      set {
        pauseStatus_ = value;
      }
    }

    /// <summary>Field number for the "SAFETY_DOOR_PAUSE" field.</summary>
    public const int SAFETYDOORPAUSEFieldNumber = 50;
    private global::VehicleControl_Viewer.Protots.VhStopSingle sAFETYDOORPAUSE_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.VhStopSingle SAFETYDOORPAUSE {
      get { return sAFETYDOORPAUSE_; }
      set {
        sAFETYDOORPAUSE_ = value;
      }
    }

    /// <summary>Field number for the "EARTHQUAKE_PAUSE" field.</summary>
    public const int EARTHQUAKEPAUSEFieldNumber = 51;
    private global::VehicleControl_Viewer.Protots.VhStopSingle eARTHQUAKEPAUSE_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VehicleControl_Viewer.Protots.VhStopSingle EARTHQUAKEPAUSE {
      get { return eARTHQUAKEPAUSE_; }
      set {
        eARTHQUAKEPAUSE_ = value;
      }
    }

    /// <summary>Field number for the "IS_INSTALLED" field.</summary>
    public const int ISINSTALLEDFieldNumber = 52;
    private bool iSINSTALLED_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ISINSTALLED {
      get { return iSINSTALLED_; }
      set {
        iSINSTALLED_ = value;
      }
    }

    /// <summary>Field number for the "X_Axis" field.</summary>
    public const int XAxisFieldNumber = 53;
    private double xAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "Y_Axis" field.</summary>
    public const int YAxisFieldNumber = 54;
    private double yAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YAxis {
      get { return yAxis_; }
      set {
        yAxis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VEHICLE_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VEHICLE_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsTcpIpConnect != other.IsTcpIpConnect) return false;
      if (VEHICLEID != other.VEHICLEID) return false;
      if (VEHICLETYPE != other.VEHICLETYPE) return false;
      if (CURADRID != other.CURADRID) return false;
      if (CURSECID != other.CURSECID) return false;
      if (ACCSECDIST != other.ACCSECDIST) return false;
      if (MODESTATUS != other.MODESTATUS) return false;
      if (ACTSTATUS != other.ACTSTATUS) return false;
      if (MCSCMD != other.MCSCMD) return false;
      if (OHTCCMD != other.OHTCCMD) return false;
      if (BLOCKPAUSE != other.BLOCKPAUSE) return false;
      if (CMDPAUSE != other.CMDPAUSE) return false;
      if (OBSPAUSE != other.OBSPAUSE) return false;
      if (HIDPAUSE != other.HIDPAUSE) return false;
      if (ERROR != other.ERROR) return false;
      if (OBSDIST != other.OBSDIST) return false;
      if (HASCST != other.HASCST) return false;
      if (CSTID != other.CSTID) return false;
      if (!object.Equals(UPDTIME, other.UPDTIME)) return false;
      if (VEHICLEACCDIST != other.VEHICLEACCDIST) return false;
      if (MANTACCDIST != other.MANTACCDIST) return false;
      if (!object.Equals(MANTDATE, other.MANTDATE)) return false;
      if (GRIPCOUNT != other.GRIPCOUNT) return false;
      if (GRIPMANTCOUNT != other.GRIPMANTCOUNT) return false;
      if (!object.Equals(GRIPMANTDATE, other.GRIPMANTDATE)) return false;
      if (ISPARKING != other.ISPARKING) return false;
      if (!object.Equals(PARKTIME, other.PARKTIME)) return false;
      if (PARKADRID != other.PARKADRID) return false;
      if (ISCYCLING != other.ISCYCLING) return false;
      if (!object.Equals(CYCLERUNTIME, other.CYCLERUNTIME)) return false;
      if (CYCLERUNID != other.CYCLERUNID) return false;
      if(!predictPath_.Equals(other.predictPath_)) return false;
      if(!cyclingPath_.Equals(other.cyclingPath_)) return false;
      if (StartAdr != other.StartAdr) return false;
      if (FromAdr != other.FromAdr) return false;
      if (ToAdr != other.ToAdr) return false;
      if (Speed != other.Speed) return false;
      if (ObsVehicleID != other.ObsVehicleID) return false;
      if(!alarms_.Equals(other.alarms_)) return false;
      if (CmdType != other.CmdType) return false;
      if (VhCMDStatus != other.VhCMDStatus) return false;
      if (VhRecentTranEvent != other.VhRecentTranEvent) return false;
      if(!willPassSectionID_.Equals(other.willPassSectionID_)) return false;
      if (ProcProgressPercen != other.ProcProgressPercen) return false;
      if (CurrentDriveDirction != other.CurrentDriveDirction) return false;
      if (CMDPRIOTITY != other.CMDPRIOTITY) return false;
      if (CMDCSTID != other.CMDCSTID) return false;
      if (State != other.State) return false;
      if (PauseStatus != other.PauseStatus) return false;
      if (SAFETYDOORPAUSE != other.SAFETYDOORPAUSE) return false;
      if (EARTHQUAKEPAUSE != other.EARTHQUAKEPAUSE) return false;
      if (ISINSTALLED != other.ISINSTALLED) return false;
      if (XAxis != other.XAxis) return false;
      if (YAxis != other.YAxis) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsTcpIpConnect != false) hash ^= IsTcpIpConnect.GetHashCode();
      if (VEHICLEID.Length != 0) hash ^= VEHICLEID.GetHashCode();
      if (VEHICLETYPE != 0) hash ^= VEHICLETYPE.GetHashCode();
      if (CURADRID.Length != 0) hash ^= CURADRID.GetHashCode();
      if (CURSECID.Length != 0) hash ^= CURSECID.GetHashCode();
      if (ACCSECDIST != 0D) hash ^= ACCSECDIST.GetHashCode();
      if (MODESTATUS != 0) hash ^= MODESTATUS.GetHashCode();
      if (ACTSTATUS != 0) hash ^= ACTSTATUS.GetHashCode();
      if (MCSCMD.Length != 0) hash ^= MCSCMD.GetHashCode();
      if (OHTCCMD.Length != 0) hash ^= OHTCCMD.GetHashCode();
      if (BLOCKPAUSE != 0) hash ^= BLOCKPAUSE.GetHashCode();
      if (CMDPAUSE != 0) hash ^= CMDPAUSE.GetHashCode();
      if (OBSPAUSE != 0) hash ^= OBSPAUSE.GetHashCode();
      if (HIDPAUSE != 0) hash ^= HIDPAUSE.GetHashCode();
      if (ERROR != 0) hash ^= ERROR.GetHashCode();
      if (OBSDIST != 0) hash ^= OBSDIST.GetHashCode();
      if (HASCST != 0) hash ^= HASCST.GetHashCode();
      if (CSTID.Length != 0) hash ^= CSTID.GetHashCode();
      if (uPDTIME_ != null) hash ^= UPDTIME.GetHashCode();
      if (VEHICLEACCDIST != 0) hash ^= VEHICLEACCDIST.GetHashCode();
      if (MANTACCDIST != 0) hash ^= MANTACCDIST.GetHashCode();
      if (mANTDATE_ != null) hash ^= MANTDATE.GetHashCode();
      if (GRIPCOUNT != 0) hash ^= GRIPCOUNT.GetHashCode();
      if (GRIPMANTCOUNT != 0) hash ^= GRIPMANTCOUNT.GetHashCode();
      if (gRIPMANTDATE_ != null) hash ^= GRIPMANTDATE.GetHashCode();
      if (ISPARKING != false) hash ^= ISPARKING.GetHashCode();
      if (pARKTIME_ != null) hash ^= PARKTIME.GetHashCode();
      if (PARKADRID.Length != 0) hash ^= PARKADRID.GetHashCode();
      if (ISCYCLING != false) hash ^= ISCYCLING.GetHashCode();
      if (cYCLERUNTIME_ != null) hash ^= CYCLERUNTIME.GetHashCode();
      if (CYCLERUNID.Length != 0) hash ^= CYCLERUNID.GetHashCode();
      hash ^= predictPath_.GetHashCode();
      hash ^= cyclingPath_.GetHashCode();
      if (StartAdr.Length != 0) hash ^= StartAdr.GetHashCode();
      if (FromAdr.Length != 0) hash ^= FromAdr.GetHashCode();
      if (ToAdr.Length != 0) hash ^= ToAdr.GetHashCode();
      if (Speed != 0D) hash ^= Speed.GetHashCode();
      if (ObsVehicleID.Length != 0) hash ^= ObsVehicleID.GetHashCode();
      hash ^= alarms_.GetHashCode();
      if (CmdType != 0) hash ^= CmdType.GetHashCode();
      if (VhCMDStatus != 0) hash ^= VhCMDStatus.GetHashCode();
      if (VhRecentTranEvent != 0) hash ^= VhRecentTranEvent.GetHashCode();
      hash ^= willPassSectionID_.GetHashCode();
      if (ProcProgressPercen != 0) hash ^= ProcProgressPercen.GetHashCode();
      if (CurrentDriveDirction != 0) hash ^= CurrentDriveDirction.GetHashCode();
      if (CMDPRIOTITY != 0) hash ^= CMDPRIOTITY.GetHashCode();
      if (CMDCSTID.Length != 0) hash ^= CMDCSTID.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (PauseStatus != 0) hash ^= PauseStatus.GetHashCode();
      if (SAFETYDOORPAUSE != 0) hash ^= SAFETYDOORPAUSE.GetHashCode();
      if (EARTHQUAKEPAUSE != 0) hash ^= EARTHQUAKEPAUSE.GetHashCode();
      if (ISINSTALLED != false) hash ^= ISINSTALLED.GetHashCode();
      if (XAxis != 0D) hash ^= XAxis.GetHashCode();
      if (YAxis != 0D) hash ^= YAxis.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsTcpIpConnect != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsTcpIpConnect);
      }
      if (VEHICLEID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VEHICLEID);
      }
      if (VEHICLETYPE != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) VEHICLETYPE);
      }
      if (CURADRID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CURADRID);
      }
      if (CURSECID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CURSECID);
      }
      if (ACCSECDIST != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(ACCSECDIST);
      }
      if (MODESTATUS != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) MODESTATUS);
      }
      if (ACTSTATUS != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ACTSTATUS);
      }
      if (MCSCMD.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(MCSCMD);
      }
      if (OHTCCMD.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(OHTCCMD);
      }
      if (BLOCKPAUSE != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) BLOCKPAUSE);
      }
      if (CMDPAUSE != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) CMDPAUSE);
      }
      if (OBSPAUSE != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) OBSPAUSE);
      }
      if (HIDPAUSE != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) HIDPAUSE);
      }
      if (ERROR != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) ERROR);
      }
      if (OBSDIST != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(OBSDIST);
      }
      if (HASCST != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(HASCST);
      }
      if (CSTID.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CSTID);
      }
      if (uPDTIME_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(UPDTIME);
      }
      if (VEHICLEACCDIST != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(VEHICLEACCDIST);
      }
      if (MANTACCDIST != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(MANTACCDIST);
      }
      if (mANTDATE_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MANTDATE);
      }
      if (GRIPCOUNT != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(GRIPCOUNT);
      }
      if (GRIPMANTCOUNT != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(GRIPMANTCOUNT);
      }
      if (gRIPMANTDATE_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(GRIPMANTDATE);
      }
      if (ISPARKING != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(ISPARKING);
      }
      if (pARKTIME_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(PARKTIME);
      }
      if (PARKADRID.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(PARKADRID);
      }
      if (ISCYCLING != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(ISCYCLING);
      }
      if (cYCLERUNTIME_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(CYCLERUNTIME);
      }
      if (CYCLERUNID.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(CYCLERUNID);
      }
      predictPath_.WriteTo(output, _repeated_predictPath_codec);
      cyclingPath_.WriteTo(output, _repeated_cyclingPath_codec);
      if (StartAdr.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(StartAdr);
      }
      if (FromAdr.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(FromAdr);
      }
      if (ToAdr.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(ToAdr);
      }
      if (Speed != 0D) {
        output.WriteRawTag(169, 2);
        output.WriteDouble(Speed);
      }
      if (ObsVehicleID.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(ObsVehicleID);
      }
      alarms_.WriteTo(output, _repeated_alarms_codec);
      if (CmdType != 0) {
        output.WriteRawTag(192, 2);
        output.WriteEnum((int) CmdType);
      }
      if (VhCMDStatus != 0) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) VhCMDStatus);
      }
      if (VhRecentTranEvent != 0) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) VhRecentTranEvent);
      }
      willPassSectionID_.WriteTo(output, _repeated_willPassSectionID_codec);
      if (ProcProgressPercen != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(ProcProgressPercen);
      }
      if (CurrentDriveDirction != 0) {
        output.WriteRawTag(232, 2);
        output.WriteEnum((int) CurrentDriveDirction);
      }
      if (CMDPRIOTITY != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(CMDPRIOTITY);
      }
      if (CMDCSTID.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(CMDCSTID);
      }
      if (State != 0) {
        output.WriteRawTag(128, 3);
        output.WriteEnum((int) State);
      }
      if (PauseStatus != 0) {
        output.WriteRawTag(136, 3);
        output.WriteEnum((int) PauseStatus);
      }
      if (SAFETYDOORPAUSE != 0) {
        output.WriteRawTag(144, 3);
        output.WriteEnum((int) SAFETYDOORPAUSE);
      }
      if (EARTHQUAKEPAUSE != 0) {
        output.WriteRawTag(152, 3);
        output.WriteEnum((int) EARTHQUAKEPAUSE);
      }
      if (ISINSTALLED != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(ISINSTALLED);
      }
      if (XAxis != 0D) {
        output.WriteRawTag(169, 3);
        output.WriteDouble(XAxis);
      }
      if (YAxis != 0D) {
        output.WriteRawTag(177, 3);
        output.WriteDouble(YAxis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsTcpIpConnect != false) {
        size += 1 + 1;
      }
      if (VEHICLEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VEHICLEID);
      }
      if (VEHICLETYPE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VEHICLETYPE);
      }
      if (CURADRID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CURADRID);
      }
      if (CURSECID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CURSECID);
      }
      if (ACCSECDIST != 0D) {
        size += 1 + 8;
      }
      if (MODESTATUS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MODESTATUS);
      }
      if (ACTSTATUS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ACTSTATUS);
      }
      if (MCSCMD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MCSCMD);
      }
      if (OHTCCMD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OHTCCMD);
      }
      if (BLOCKPAUSE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BLOCKPAUSE);
      }
      if (CMDPAUSE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CMDPAUSE);
      }
      if (OBSPAUSE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OBSPAUSE);
      }
      if (HIDPAUSE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HIDPAUSE);
      }
      if (ERROR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ERROR);
      }
      if (OBSDIST != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OBSDIST);
      }
      if (HASCST != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HASCST);
      }
      if (CSTID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CSTID);
      }
      if (uPDTIME_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UPDTIME);
      }
      if (VEHICLEACCDIST != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VEHICLEACCDIST);
      }
      if (MANTACCDIST != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MANTACCDIST);
      }
      if (mANTDATE_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MANTDATE);
      }
      if (GRIPCOUNT != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GRIPCOUNT);
      }
      if (GRIPMANTCOUNT != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GRIPMANTCOUNT);
      }
      if (gRIPMANTDATE_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GRIPMANTDATE);
      }
      if (ISPARKING != false) {
        size += 2 + 1;
      }
      if (pARKTIME_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PARKTIME);
      }
      if (PARKADRID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PARKADRID);
      }
      if (ISCYCLING != false) {
        size += 2 + 1;
      }
      if (cYCLERUNTIME_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CYCLERUNTIME);
      }
      if (CYCLERUNID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CYCLERUNID);
      }
      size += predictPath_.CalculateSize(_repeated_predictPath_codec);
      size += cyclingPath_.CalculateSize(_repeated_cyclingPath_codec);
      if (StartAdr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StartAdr);
      }
      if (FromAdr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FromAdr);
      }
      if (ToAdr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ToAdr);
      }
      if (Speed != 0D) {
        size += 2 + 8;
      }
      if (ObsVehicleID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ObsVehicleID);
      }
      size += alarms_.CalculateSize(_repeated_alarms_codec);
      if (CmdType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmdType);
      }
      if (VhCMDStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) VhCMDStatus);
      }
      if (VhRecentTranEvent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) VhRecentTranEvent);
      }
      size += willPassSectionID_.CalculateSize(_repeated_willPassSectionID_codec);
      if (ProcProgressPercen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProcProgressPercen);
      }
      if (CurrentDriveDirction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CurrentDriveDirction);
      }
      if (CMDPRIOTITY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CMDPRIOTITY);
      }
      if (CMDCSTID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CMDCSTID);
      }
      if (State != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (PauseStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PauseStatus);
      }
      if (SAFETYDOORPAUSE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SAFETYDOORPAUSE);
      }
      if (EARTHQUAKEPAUSE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EARTHQUAKEPAUSE);
      }
      if (ISINSTALLED != false) {
        size += 2 + 1;
      }
      if (XAxis != 0D) {
        size += 2 + 8;
      }
      if (YAxis != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VEHICLE_INFO other) {
      if (other == null) {
        return;
      }
      if (other.IsTcpIpConnect != false) {
        IsTcpIpConnect = other.IsTcpIpConnect;
      }
      if (other.VEHICLEID.Length != 0) {
        VEHICLEID = other.VEHICLEID;
      }
      if (other.VEHICLETYPE != 0) {
        VEHICLETYPE = other.VEHICLETYPE;
      }
      if (other.CURADRID.Length != 0) {
        CURADRID = other.CURADRID;
      }
      if (other.CURSECID.Length != 0) {
        CURSECID = other.CURSECID;
      }
      if (other.ACCSECDIST != 0D) {
        ACCSECDIST = other.ACCSECDIST;
      }
      if (other.MODESTATUS != 0) {
        MODESTATUS = other.MODESTATUS;
      }
      if (other.ACTSTATUS != 0) {
        ACTSTATUS = other.ACTSTATUS;
      }
      if (other.MCSCMD.Length != 0) {
        MCSCMD = other.MCSCMD;
      }
      if (other.OHTCCMD.Length != 0) {
        OHTCCMD = other.OHTCCMD;
      }
      if (other.BLOCKPAUSE != 0) {
        BLOCKPAUSE = other.BLOCKPAUSE;
      }
      if (other.CMDPAUSE != 0) {
        CMDPAUSE = other.CMDPAUSE;
      }
      if (other.OBSPAUSE != 0) {
        OBSPAUSE = other.OBSPAUSE;
      }
      if (other.HIDPAUSE != 0) {
        HIDPAUSE = other.HIDPAUSE;
      }
      if (other.ERROR != 0) {
        ERROR = other.ERROR;
      }
      if (other.OBSDIST != 0) {
        OBSDIST = other.OBSDIST;
      }
      if (other.HASCST != 0) {
        HASCST = other.HASCST;
      }
      if (other.CSTID.Length != 0) {
        CSTID = other.CSTID;
      }
      if (other.uPDTIME_ != null) {
        if (uPDTIME_ == null) {
          uPDTIME_ = new global::VehicleControl_Viewer.Protots.Timestamp();
        }
        UPDTIME.MergeFrom(other.UPDTIME);
      }
      if (other.VEHICLEACCDIST != 0) {
        VEHICLEACCDIST = other.VEHICLEACCDIST;
      }
      if (other.MANTACCDIST != 0) {
        MANTACCDIST = other.MANTACCDIST;
      }
      if (other.mANTDATE_ != null) {
        if (mANTDATE_ == null) {
          mANTDATE_ = new global::VehicleControl_Viewer.Protots.Timestamp();
        }
        MANTDATE.MergeFrom(other.MANTDATE);
      }
      if (other.GRIPCOUNT != 0) {
        GRIPCOUNT = other.GRIPCOUNT;
      }
      if (other.GRIPMANTCOUNT != 0) {
        GRIPMANTCOUNT = other.GRIPMANTCOUNT;
      }
      if (other.gRIPMANTDATE_ != null) {
        if (gRIPMANTDATE_ == null) {
          gRIPMANTDATE_ = new global::VehicleControl_Viewer.Protots.Timestamp();
        }
        GRIPMANTDATE.MergeFrom(other.GRIPMANTDATE);
      }
      if (other.ISPARKING != false) {
        ISPARKING = other.ISPARKING;
      }
      if (other.pARKTIME_ != null) {
        if (pARKTIME_ == null) {
          pARKTIME_ = new global::VehicleControl_Viewer.Protots.Timestamp();
        }
        PARKTIME.MergeFrom(other.PARKTIME);
      }
      if (other.PARKADRID.Length != 0) {
        PARKADRID = other.PARKADRID;
      }
      if (other.ISCYCLING != false) {
        ISCYCLING = other.ISCYCLING;
      }
      if (other.cYCLERUNTIME_ != null) {
        if (cYCLERUNTIME_ == null) {
          cYCLERUNTIME_ = new global::VehicleControl_Viewer.Protots.Timestamp();
        }
        CYCLERUNTIME.MergeFrom(other.CYCLERUNTIME);
      }
      if (other.CYCLERUNID.Length != 0) {
        CYCLERUNID = other.CYCLERUNID;
      }
      predictPath_.Add(other.predictPath_);
      cyclingPath_.Add(other.cyclingPath_);
      if (other.StartAdr.Length != 0) {
        StartAdr = other.StartAdr;
      }
      if (other.FromAdr.Length != 0) {
        FromAdr = other.FromAdr;
      }
      if (other.ToAdr.Length != 0) {
        ToAdr = other.ToAdr;
      }
      if (other.Speed != 0D) {
        Speed = other.Speed;
      }
      if (other.ObsVehicleID.Length != 0) {
        ObsVehicleID = other.ObsVehicleID;
      }
      alarms_.Add(other.alarms_);
      if (other.CmdType != 0) {
        CmdType = other.CmdType;
      }
      if (other.VhCMDStatus != 0) {
        VhCMDStatus = other.VhCMDStatus;
      }
      if (other.VhRecentTranEvent != 0) {
        VhRecentTranEvent = other.VhRecentTranEvent;
      }
      willPassSectionID_.Add(other.willPassSectionID_);
      if (other.ProcProgressPercen != 0) {
        ProcProgressPercen = other.ProcProgressPercen;
      }
      if (other.CurrentDriveDirction != 0) {
        CurrentDriveDirction = other.CurrentDriveDirction;
      }
      if (other.CMDPRIOTITY != 0) {
        CMDPRIOTITY = other.CMDPRIOTITY;
      }
      if (other.CMDCSTID.Length != 0) {
        CMDCSTID = other.CMDCSTID;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.PauseStatus != 0) {
        PauseStatus = other.PauseStatus;
      }
      if (other.SAFETYDOORPAUSE != 0) {
        SAFETYDOORPAUSE = other.SAFETYDOORPAUSE;
      }
      if (other.EARTHQUAKEPAUSE != 0) {
        EARTHQUAKEPAUSE = other.EARTHQUAKEPAUSE;
      }
      if (other.ISINSTALLED != false) {
        ISINSTALLED = other.ISINSTALLED;
      }
      if (other.XAxis != 0D) {
        XAxis = other.XAxis;
      }
      if (other.YAxis != 0D) {
        YAxis = other.YAxis;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsTcpIpConnect = input.ReadBool();
            break;
          }
          case 18: {
            VEHICLEID = input.ReadString();
            break;
          }
          case 24: {
            vEHICLETYPE_ = (global::VehicleControl_Viewer.Protots.VehicleType) input.ReadEnum();
            break;
          }
          case 34: {
            CURADRID = input.ReadString();
            break;
          }
          case 42: {
            CURSECID = input.ReadString();
            break;
          }
          case 49: {
            ACCSECDIST = input.ReadDouble();
            break;
          }
          case 56: {
            mODESTATUS_ = (global::VehicleControl_Viewer.Protots.VHModeStatus) input.ReadEnum();
            break;
          }
          case 64: {
            aCTSTATUS_ = (global::VehicleControl_Viewer.Protots.VHActionStatus) input.ReadEnum();
            break;
          }
          case 74: {
            MCSCMD = input.ReadString();
            break;
          }
          case 82: {
            OHTCCMD = input.ReadString();
            break;
          }
          case 88: {
            bLOCKPAUSE_ = (global::VehicleControl_Viewer.Protots.VhStopSingle) input.ReadEnum();
            break;
          }
          case 96: {
            cMDPAUSE_ = (global::VehicleControl_Viewer.Protots.VhStopSingle) input.ReadEnum();
            break;
          }
          case 104: {
            oBSPAUSE_ = (global::VehicleControl_Viewer.Protots.VhStopSingle) input.ReadEnum();
            break;
          }
          case 112: {
            hIDPAUSE_ = (global::VehicleControl_Viewer.Protots.VhStopSingle) input.ReadEnum();
            break;
          }
          case 120: {
            eRROR_ = (global::VehicleControl_Viewer.Protots.VhStopSingle) input.ReadEnum();
            break;
          }
          case 128: {
            OBSDIST = input.ReadInt32();
            break;
          }
          case 136: {
            HASCST = input.ReadInt32();
            break;
          }
          case 146: {
            CSTID = input.ReadString();
            break;
          }
          case 154: {
            if (uPDTIME_ == null) {
              uPDTIME_ = new global::VehicleControl_Viewer.Protots.Timestamp();
            }
            input.ReadMessage(uPDTIME_);
            break;
          }
          case 160: {
            VEHICLEACCDIST = input.ReadInt32();
            break;
          }
          case 168: {
            MANTACCDIST = input.ReadInt32();
            break;
          }
          case 178: {
            if (mANTDATE_ == null) {
              mANTDATE_ = new global::VehicleControl_Viewer.Protots.Timestamp();
            }
            input.ReadMessage(mANTDATE_);
            break;
          }
          case 184: {
            GRIPCOUNT = input.ReadInt32();
            break;
          }
          case 192: {
            GRIPMANTCOUNT = input.ReadInt32();
            break;
          }
          case 202: {
            if (gRIPMANTDATE_ == null) {
              gRIPMANTDATE_ = new global::VehicleControl_Viewer.Protots.Timestamp();
            }
            input.ReadMessage(gRIPMANTDATE_);
            break;
          }
          case 208: {
            ISPARKING = input.ReadBool();
            break;
          }
          case 218: {
            if (pARKTIME_ == null) {
              pARKTIME_ = new global::VehicleControl_Viewer.Protots.Timestamp();
            }
            input.ReadMessage(pARKTIME_);
            break;
          }
          case 226: {
            PARKADRID = input.ReadString();
            break;
          }
          case 232: {
            ISCYCLING = input.ReadBool();
            break;
          }
          case 242: {
            if (cYCLERUNTIME_ == null) {
              cYCLERUNTIME_ = new global::VehicleControl_Viewer.Protots.Timestamp();
            }
            input.ReadMessage(cYCLERUNTIME_);
            break;
          }
          case 250: {
            CYCLERUNID = input.ReadString();
            break;
          }
          case 258: {
            predictPath_.AddEntriesFrom(input, _repeated_predictPath_codec);
            break;
          }
          case 266: {
            cyclingPath_.AddEntriesFrom(input, _repeated_cyclingPath_codec);
            break;
          }
          case 274: {
            StartAdr = input.ReadString();
            break;
          }
          case 282: {
            FromAdr = input.ReadString();
            break;
          }
          case 290: {
            ToAdr = input.ReadString();
            break;
          }
          case 297: {
            Speed = input.ReadDouble();
            break;
          }
          case 306: {
            ObsVehicleID = input.ReadString();
            break;
          }
          case 314: {
            alarms_.AddEntriesFrom(input, _repeated_alarms_codec);
            break;
          }
          case 320: {
            cmdType_ = (global::VehicleControl_Viewer.Protots.CommandType) input.ReadEnum();
            break;
          }
          case 328: {
            vhCMDStatus_ = (global::VehicleControl_Viewer.Protots.CommandStatus) input.ReadEnum();
            break;
          }
          case 336: {
            vhRecentTranEvent_ = (global::VehicleControl_Viewer.Protots.EventType) input.ReadEnum();
            break;
          }
          case 346: {
            willPassSectionID_.AddEntriesFrom(input, _repeated_willPassSectionID_codec);
            break;
          }
          case 352: {
            ProcProgressPercen = input.ReadInt32();
            break;
          }
          case 360: {
            currentDriveDirction_ = (global::VehicleControl_Viewer.Protots.DriveDirction) input.ReadEnum();
            break;
          }
          case 368: {
            CMDPRIOTITY = input.ReadInt32();
            break;
          }
          case 378: {
            CMDCSTID = input.ReadString();
            break;
          }
          case 384: {
            state_ = (global::VehicleControl_Viewer.Protots.VehicleState) input.ReadEnum();
            break;
          }
          case 392: {
            pauseStatus_ = (global::VehicleControl_Viewer.Protots.VhStopSingle) input.ReadEnum();
            break;
          }
          case 400: {
            sAFETYDOORPAUSE_ = (global::VehicleControl_Viewer.Protots.VhStopSingle) input.ReadEnum();
            break;
          }
          case 408: {
            eARTHQUAKEPAUSE_ = (global::VehicleControl_Viewer.Protots.VhStopSingle) input.ReadEnum();
            break;
          }
          case 416: {
            ISINSTALLED = input.ReadBool();
            break;
          }
          case 425: {
            XAxis = input.ReadDouble();
            break;
          }
          case 433: {
            YAxis = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
